<template id="editor-tmpl">
  <div class="writ-editor">
    <div class="checkbox-control">
      <input type="checkbox" class="checkbox-input" id="edit-mode" />
      <label for="edit-mode" class="checkbox-label">
        Edit mode
      </label>
    </div>
    <button type="button" id="rebuild-btn">Rebuild</button>
    <button type="button" id="save-btn">Save</button>
    <div class="unsaved-changes">
      <h3>Unsaved changes:</h3>
      <ul id="unsaved-changes-list" class="unsaved-changes-list"></ul>
    </div>
  </div>
</template>

<style type="text/css">
:root {
  --editor-height: 36px;
}

body {
  margin-top: var(--editor-height);
}

.writ-editor {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  height: var(--editor-height);
  background: #fffa;
  backdrop-filter: blur(5px);
  transition: all .5s;
}

.writ-editor .checkbox-control {
  --padding: 0.25rem;
  padding: var(--padding);
  position: relative;
  display: inline-flex;
}

.writ-editor .checkbox-control .checkbox-input {
  margin: 0;
  position: absolute;
  top: 50%;
  left: calc(var(--padding) + 0.5rem);
  z-index: 1;
  transform: translateY(-55%);
}

.writ-editor .checkbox-control .checkbox-label {
  padding: 0.5em 0.5em 0.4em 1.75em;
  font: normal 14px/1 helvetica, arial, sans-serif;
  background: hotpink;
  border-radius: 5px;
}

.writ-editor .checkbox-control :checked + .checkbox-label {
  background: yellow;
}

.writ-editor .checkbox-control .checkbox-input {
  margin: 0;
  align-self: flex-start;
}

.writ-editor .unsaved-changes {
  max-height: initial;
  overflow: visible;
  opacity: 1;
  transform: scale(1, 1);
}

.writ-editor .unsaved-changes {
  max-height: 0;
  overflow: hidden;
  opacity: 0;
  transform: scale(1, 0);
  transition: all .5s;
}

body.edit-mode [data-editable="true"] {
  --outline-offset: 7px;
  --outline-width: 3px;
  --outline-color: gainsboro;
  box-shadow:
    0 0 0 var(--outline-offset) white,
    0 0 0 calc( var(--outline-offset) + var(--outline-width) ) var(--outline-color);
  outline-offset: var(--outline-offset);
  border-radius: 1px;
  transition: all .3s;
}

body.edit-mode [data-editable="true"]:hover {
  --outline-color: deepskyblue;
}

body.edit-mode [data-editable="true"]:focus-within {
  --outline-color: transparent;
  --outline-offset: 1px;
}
</style>

<script type="text/javascript">
  const query = document.querySelector.bind(document)
  const queryAll = document.querySelectorAll.bind(document)

  const editorTemplate = query('#editor-tmpl')
  const editorElement = editorTemplate.content.firstElementChild
  const unsavedChangesList = editorElement.querySelector('#unsaved-changes-list')

  const rebuild = () => {
    return fetch('/cms/refresh')
  }

  const Post = {
    updateContent(path, content) {
      console.log('updateContent', path, content)
      return fetch(`/cms/post`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          content,
          path
        })
      })
    },

    updateTitle(path, title, foldered) {
      console.log('updateTitle', path, title, foldered)
      return fetch(`/cms/post`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          title,
          updateUrl: true,
          path,
          foldered
        })
      })
    }
  }

  const findParent = (element, tagName) => {
    if (element === document.body) {
      return null
    }
    const re = new RegExp(tagName, 'i')
    if (element.parentElement.tagName.match(re)) {
      return element.parentElement
    }
    return findParent(element.parentElement, tagName)
  }

  const omit = (object, keyToOmit) => {
    const keys = Object.keys(object)
    const restKeys = keys.filter(k => k !== keyToOmit)
    const restObject = restKeys.reduce((obj, key) => {
      return {
        ...obj,
        [key]: object[key]
      }
    }, {})
    return restObject
  }

  let editMode = false
  let unsavedChanges = {}

  document.body.appendChild(editorElement)
  document.title = (() => {
    var el = document.createElement('div')
    el.innerHTML = document.title
    return el.innerText
  })()

  query('#rebuild-btn').addEventListener('click', () => {
    rebuild()
  })

  query('#save-btn').addEventListener('click', async () => {
    console.log('changes', unsavedChanges)
    Object.keys(unsavedChanges).forEach(async (filePath) => {
        const change = unsavedChanges[filePath]
        if (!change) {
          return
        }
        if (change.content) {
          await Post.updateContent(filePath, change.content)
        }
        if (change.title) {
          await Post.updateTitle(filePath, change.title, change.foldered)
        }
    })
  })

  query('#edit-mode').addEventListener('change', (e) => {
    document.body.classList.toggle('edit-mode')
    editMode = !editMode
    editables.forEach(editable => {
      editable.contentEditable = e.target.checked
    })
  })

  const editables = Array.from(queryAll('[data-editable="true"]'))
  const originals = editables.map(e => ({
    path: e.dataset.path,
    content: e.innerHTML
  }))

  editables.forEach(editable => {
    const { section, path, foldered } = editable.dataset
      console.log('foldered', foldered)
    const originalContent = originals.find(c => c.path === path).content

    editable.addEventListener('input', (e) => {
      const isSameContent = originalContent === editable.innerHTML
      if (isSameContent) {
        const otherChanges = omit(omit(unsavedChanges[path], section), 'foldered')
        if (Object.keys(otherChanges).length) {
          unsavedChanges[path] = otherChanges
        } else {
          unsavedChanges = omit(unsavedChanges, path)
        }
      } else {
        unsavedChanges[path] = {
          ...unsavedChanges[path],
          [section]: editable.innerHTML.trim(),
          foldered: foldered === 'true' || foldered === true
        }
      }
      unsavedChangesList.innerHTML = Object.keys(unsavedChanges).map(path => `
        ${Object.keys(unsavedChanges[path]).map(key => `
          <li>${path} (${unsavedChanges[path][key]})</li>
        `)}
      `).join('')
      editorElement.classList.toggle('unsaved', Object.keys(unsavedChanges).length)
    })

    editable.addEventListener('click', e => {
      if (editMode && findParent(editable, 'A')) {
        e.preventDefault()
      }
    })
  })
</script>
